<select class="gallery-select">
	<option class="nav-link" value="all">All</option> 
</select>  
<ul id="gallery-nav">
	<li>
	<a class="active-link nav-link" data-target="all" href="#">All</a>
	</li>
</ul>
<div id="gallery" class="bricklayer"></div>

{% schema %} 
  {
    "name": "Gallery",
    "settings": [
		{
			"type": "select",
			"id": "per-row",
			"label": "Images per row",
			"options": [
				{
					"value": "49.5%",
					"label": "2 per row"
				},
				{
					"value": "32.5%",
					"label": "3 per row"
				},
				{
					"value": "24.5%",
					"label": "4 per row"
				},
				{
					"value": "19.5%",
					"label": "5 per row"
				}
			],
			"default": "32.5%"
		}
	],
	"blocks": [
		{
			"type": "image",
			"name": "Image Block",
			"settings": [
				{
					"type": "image_picker",
					"id": "image",
					"label": "Image"
				}
			]
		}
	]
  }
{% endschema %}

{% style %}
select {
	display: none;
}
.gallery-select {
	display: block;
	width: 25%;
	margin: 0 auto;
}

.gallery-select .list {
	width: 100%;
}

.hide {
   display: none;
}

#gallery-nav {
	display: flex;
	justify-content: center;
	align-items: center;
} 

#gallery-nav li {
	margin: 0 1em;
} 

#gallery {
	height: auto;
	display: flex; 
}

.container {
	padding: 0;
}

li {
	list-style: none;
}

.bricklayer-column {
	display: block; 
} 

#gallery a {
	display: block;
} 

@media screen and (min-width: 1500px) {
	.bricklayer-column-sizer {
		width: 16.66%;
	}
}
@media screen and (min-width: 1000px) and (max-width: 1500px){
	.bricklayer-column-sizer {
		width: 20%; 
	}
}
@media screen and (min-width: 700px) and (max-width: 1000px){
	.bricklayer-column-sizer {
		width: 33.33%; 
	}
}
@media screen and (max-width: 500px) {
	.bricklayer-column-sizer {
		width: 50%;
	}
}
@media screen and (max-width: 1021px) {
	#gallery-nav {
		display: none;
	}
} 
@media screen and (min-width: 1022px) {
	.nice-select.gallery-select {
		display: none;
	}
} 

.grid-item {
	width: 100%;
	cursor: pointer;
}

#gallery img {
	width: 100%;
	margin-top: 10px; 
} 

ul {
	padding: 0;
}

.active-link {
	color: {{ settings.color_base }}
} 
{% endstyle %} 

{% javascript %}
$(document).ready(function() {
	$('select').niceSelect();
});
// Functions
function setAttributes(el, attrs) {
	for (var key in attrs) {
		el.setAttribute(key, attrs[key]);
	}
}

function getScrollBarWidth() {
	var $outer = $('<div>').css({
			visibility: 'hidden',
			width: 100,
			overflow: 'scroll'
		}).appendTo('body'),
		widthWithScroll = $('<div>').css({
			width: '100%'
		}).appendTo($outer).outerWidth();
	$outer.remove();
	return 100 - widthWithScroll;
};

// Global variables
const scrollbarWidth = getScrollBarWidth();
const gallery = document.getElementById('gallery')
const bricklayer = new Bricklayer(gallery)
const pageContainer = document.querySelector('#sp-pageContent .container');
let setCounter = 0;
let container;
let galleryInfo = {}

$('#shopify-section-gallery').on('click', '.option', function (event) {
	event.preventDefault();
	if ($(this).attr('data-value') == 'all') {
		$('.grid-item').removeClass('hide')
	} else {
		$(`.grid-item:not(.${$(this).data('value')}-grid-item)`).addClass('hide')
		$(`.${$(this).data('value')}-grid-item`).removeClass('hide')
	} 
	bricklayer.redraw() 
	$('.option').removeClass('active-link')
	$(this).addClass('active-link') 
})

pageContainer.setAttribute('style', `width: calc(100vw - ${scrollbarWidth}px - 2rem); max-width: calc(100vw - ${scrollbarWidth}px - 2rem); margin: 0 calc(1rem + ${scrollbarWidth}px) 0 1rem`);
async function postData(data = {}, url = 'http://api.zenfolio.com/api/1.8/zfapi.asmx') {

	const response = await fetch(url, {
		method: 'POST', // *GET, POST, PUT, DELETE, etc.
		mode: 'cors', // no-cors, *cors, same-origin
		cache: 'no-cache', // *default, no-cache, reload, force-cache, only-if-cached
		headers: {
			'Content-Type': 'application/json',
		},
		referrerPolicy: 'no-referrer', // no-referrer, *no-referrer-when-downgrade, origin, origin-when-cross-origin, same-origin, strict-origin, strict-origin-when-cross-origin, unsafe-url
		body: JSON.stringify(data) // body data type must match "Content-Type" header
	});
	return response.json(); // parses JSON response into native JavaScript objects
}
let photoSetsP;
let groupHierarchyP = postData({
		"method": "LoadGroupHierarchy",
		"params": ["d5marketingphotography"],
		"id": 1
	})
	.then(data => {
		portfolioSets = data.result.Elements[1].Elements
		numSets = portfolioSets.length
		portfolioSets.forEach((set) => {

			let re = new RegExp('\/p(.*)');
			let setId = re.exec(set.PageUrl)[1]
			photoSetsP = postData({
					"method": "LoadPhotoSetPhotos",
					"params": [setId, 0, 30],
					"id": 1
				})
				.then(res => {
					if (res.result.length > 0) {
						let setObj = {};
						let setImages = [];
						let domArr = [];

						let galleryNav = document.getElementById('gallery-nav')
						let selectNav = document.querySelector('.gallery-select')

						let selectOption = document.createElement("option");
						let optionText = document.createTextNode(set.Title)

						let li = document.createElement("li")
						let link = document.createElement("a")
						let text = document.createTextNode(set.Title)

						let escapedTitle = set.Title.replace(/[^\w]/gi, '');

						galleryInfo[escapedTitle] = {
							domArr: []
						}

						setAttributes(selectOption, {
							"class": "nav-link nav-link-select",
							"value": escapedTitle
						}) 

						setAttributes(link, {
							"data-target": escapedTitle,
							"href": "#",
							"class": "nav-link" 
						})

						selectOption.appendChild(optionText)
						selectNav.appendChild(selectOption)
						$('select').niceSelect('update')

						// TODO: create helper function to chain appendChild calls
						link.appendChild(text)
						li.appendChild(link)
						galleryNav.appendChild(li)


						let lgIndex = 0;
						res.result.forEach(photo => {

							const createImageUrl = (size) => {
								return `http://${photo.UrlHost}${photo.UrlCore}-${size}.jpg?sn=${photo.Sequence}&tk=${photo.UrlToken}`
							}

							let anchor = document.createElement('a')
							setAttributes(anchor, {
								"class": `${escapedTitle}-grid-item grid-item`,
								"data-index": lgIndex
							}) 
							let escapedPhotoTitle = photo.Title.replace(/[^\w]/gi, '');
							let setImage = {
								src: createImageUrl(2),
								srcset: `${createImageUrl(2)} 400w, ${createImageUrl(3)} 580w, ${createImageUrl(4)} 800w`,
								sizes: "(min-width: 40em) 80vw, 100vw",
								subHtml: `<h4>${photo.Title}</h4>`,
								alt: escapedPhotoTitle
							}
							setImages.push(setImage);


							let thumb = document.createElement('img')
							setAttributes(thumb, {
								"src": `${createImageUrl(2)}`,
								"alt": escapedPhotoTitle
							})

							anchor.appendChild(thumb);
							domArr.push(anchor)
							galleryInfo[escapedTitle].domArr.push(anchor)
							bricklayer.append(anchor);


							lgIndex++;
						})
						setObj['title'] = escapedTitle;
						setObj['lgObjArr'] = setImages;
						setObj['domArr'] = domArr;
						galleryInfo[escapedTitle].lgArr = setImages;
						return setObj;
					}


				}) 
				.then(lgSetObj => {
					if (lgSetObj) { 
						$(`[data-target='${lgSetObj.title}'],[data-target='all']`).click(function (event) {
							event.preventDefault();
							if ($(this).attr('data-target') == 'all') {
								$('.grid-item').removeClass('hide')
							} else {
								$(`.grid-item:not(.${lgSetObj.title}-grid-item)`).addClass('hide')
								$(`.${lgSetObj.title}-grid-item`).removeClass('hide')
							}
							bricklayer.redraw()
							$('.nav-link').removeClass('active-link')
							$(this).addClass('active-link')
						})
						$(`.${lgSetObj.title}-grid-item`).on('click', function () {
							let lg = $(this).lightGallery({
								dynamic: true,
								dynamicEl: lgSetObj.lgObjArr,
								download: false
							})
							lg.data('lightGallery').index = $(this).data("index")
						})
					}
				})

		})
	}) 
{% endjavascript %}
