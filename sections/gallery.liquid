<ul id="gallery-nav"></ul>
<div id="gallery"></div>

{% schema %}
  {
    "name": "Gallery",
    "settings": [
		{
			"type": "select",
			"id": "per-row",
			"label": "Images per row",
			"options": [
				{
					"value": "49.5%",
					"label": "2 per row"
				},
				{
					"value": "32.5%",
					"label": "3 per row"
				},
				{
					"value": "24.5%",
					"label": "4 per row"
				},
				{
					"value": "19.5%",
					"label": "5 per row"
				}
			],
			"default": "32.5%"
		}
	],
	"blocks": [
		{
			"type": "image",
			"name": "Image Block",
			"settings": [
				{
					"type": "image_picker",
					"id": "image",
					"label": "Image"
				}
			]
		}
	]
  }
{% endschema %}

{% style %}

#gallery-nav {
	display: flex;
	justify-content: center;
	align-items: center;
}

#gallery-nav li {
	list-style: none;
	margin: 0 1em;
} 



#gallery div a {
	margin: 0 auto;
}

.container {
	padding: 0;
}

li {
	list-style: none;
	cursor: pointer;
}

#gallery ul {
	display: none;
	padding: 0;
}

#gallery ul.active-set {
	display: flex;
	flex-wrap: wrap;
}

#gallery li {
	height: 40vh;
	flex-grow: 1;
}



#gallery img {
	max-height: 100%;
	min-width: 100%;
	object-fit: cover;
	vertical-align: bottom;
}

{% endstyle %}

{% javascript %}
	function getScrollBarWidth() {
		var $outer = $('<div>').css({
				visibility: 'hidden',
				width: 100,
				overflow: 'scroll'
			}).appendTo('body'),
			widthWithScroll = $('<div>').css({
				width: '100%'
			}).appendTo($outer).outerWidth();
		$outer.remove();
		return 100 - widthWithScroll;
	};
	const scrollbarWidth = getScrollBarWidth();
	const pageContainer = document.querySelector('#sp-pageContent .container');
	let setCounter = 0;
	pageContainer.setAttribute('style', `width: calc(100vw - ${scrollbarWidth}px - 2rem); max-width: calc(100vw - ${scrollbarWidth}px - 2rem); margin: 0 calc(1rem + ${scrollbarWidth}px) 0 1rem`);
	async function postData(data = {}, url = 'http://api.zenfolio.com/api/1.8/zfapi.asmx') {

		const response = await fetch(url, {
			method: 'POST', // *GET, POST, PUT, DELETE, etc.
			mode: 'cors', // no-cors, *cors, same-origin
			cache: 'no-cache', // *default, no-cache, reload, force-cache, only-if-cached
			headers: {
				'Content-Type': 'application/json',
			},
			referrerPolicy: 'no-referrer', // no-referrer, *no-referrer-when-downgrade, origin, origin-when-cross-origin, same-origin, strict-origin, strict-origin-when-cross-origin, unsafe-url
			body: JSON.stringify(data) // body data type must match "Content-Type" header
		});
		return response.json(); // parses JSON response into native JavaScript objects
	}

	postData({
			"method": "LoadGroupHierarchy",
			"params": ["d5marketingphotography"],
			"id": 1
		})
		.then(data => {
			portfolioSets = data.result.Elements[1].Elements
			numSets = portfolioSets.length
			portfolioSets.forEach((set) => {
				console.log(set)

				let re = new RegExp('\/p(.*)');
				let setId = re.exec(set.PageUrl)[1]
				postData({
						"method": "LoadPhotoSetPhotos",
						"params": [setId, 0, 30],
						"id": 1
					})
					.then(res => {
						if (res.result.length > 0) {
							let gallery = document.getElementById('gallery')
							let galleryNav = document.getElementById('gallery-nav')

							let li = document.createElement("li")
							let link = document.createElement("a")
							let escapedTitle = set.Title.replace(/[^\w]/gi, '');
							link.setAttribute('data-target', escapedTitle);
							link.setAttribute('href', "#");
							link.addEventListener('click', event => {
								event.preventDefault;
								document.querySelectorAll('#gallery ul').forEach(item => {
									item.removeAttribute('class');
								});
								
								document.querySelector(`ul#${event.currentTarget.dataset.target}`).setAttribute('class', 'active-set'); 
							})

							let text = document.createTextNode(set.Title)

							link.appendChild(text)
							li.appendChild(link)
							galleryNav.appendChild(li)

							let container = document.createElement('ul');
							
							container.setAttribute('id', escapedTitle)
							setCounter++;
							if(setCounter == 1){
								container.setAttribute('class', 'active-set')
							}

							res.result.forEach(photo => {
								//console.log(photo);
								const createImageUrl = (size) => {
									return `http://${photo.UrlHost}${photo.UrlCore}-${size}.jpg?sn=${photo.Sequence}&tk=${photo.UrlToken}`
								}

								let srcset = document.createElement('li')
								srcset.setAttribute('data-src', createImageUrl(3))
								srcset.setAttribute('data-srcset', `${createImageUrl(2)} 400w, ${createImageUrl(3)} 580w, ${createImageUrl(4)} 800w`)
								srcset.setAttribute('data-sizes', "(min-width: 40em) 80vw, 100vw")
								srcset.setAttribute('data-sub-html', `<h4>${photo.Title}</h4>`)

								let thumb = document.createElement('img')
								thumb.setAttribute('src', `${createImageUrl(3)}`);
								thumb.setAttribute('srcset', `${createImageUrl(11)} 120w, ${createImageUrl(2)} 400w, ${createImageUrl(3)} 580w, ${createImageUrl(4)} 800w`)
								thumb.setAttribute('sizes', "33vw")
								// thumb.setAttribute('style', "width: 33vw; height: auto;");
								container.appendChild(srcset);
								srcset.appendChild(thumb);
								gallery.appendChild(container);

							})
						}


					})
					.finally(() => {
						
						/*
						if(numSets == setCounter){
							console.log(numSets)
							console.log(setCounter)
							document.getElementById('gallery').appendChild(document.createElement('li'));
						}*/
						let lgContainer = document.getElementById(set.Title)
						if (lgContainer) {
							lightGallery(lgContainer, {
								download: false,
								googlePlus: false,
							});
						}
					})
			})
		})
{% endjavascript %}
